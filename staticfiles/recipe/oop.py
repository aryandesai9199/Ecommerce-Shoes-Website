#Python ркорк╛ркВ Object Oriented Programming (OOP) ркП ркПрк╡рлА рк╢рлИрк▓рлА ркЫрлЗ ркЬрлЗркорк╛ркВ ркдркорлЗ рк╡рк╕рлНркдрлБркУ (objects) ркЕркирлЗ ркХрк▓рк╛рк╕рлЛ (classes)ркирк╛ ркЖркзрк╛рк░ рккрк░ рккрлНрк░рлЛркЧрлНрк░рк╛рко рк▓ркЦрлЛ ркЫрлЛ.
#OOPs рккркжрлНркзркдрк┐ Code ркирлЗ рк╡ркзрлБ organize, reusable ркЕркирлЗ scalable ркмркирк╛рк╡рлЗ ркЫрлЗ.

#OOPs ркирк╛ 4 ркорлБркЦрлНркп рккрк┐рк▓рлНрк▓рк░
    # 1.Class тАУ ркорлЛркбрлЗрк▓ ркХрлЗ structure

    # 2.Object тАУ Class ркирлЛ instance

    # 3.Encapsulation(ркПркирлНркХрлЗрккрлНрк╕рлНркпрлБрк▓рлЗрк╢рки) тАУ ркбрлЗркЯрк╛ ркЕркирлЗ рклркВркХрлНрк╢ркирлНрк╕ркирлЗ ркПркХркоркорк╛ркВ ркЫрлБрккрк╛рк╡рк╡рлБркВ

    # 4.Inheritance тАУ ркПркХ class ркмрлАркЬрлА class ркирлА рк╡рк┐рк╢рлЗрк╖ркдрк╛ркУ рк▓рлЗ рк╢ркХрлЗ
   
    # 5.Polymorphism тАУ ркПркХ ркЬ ркирк╛ркоркирк╛ рклркВркХрлНрк╢ркирлНрк╕/ркорлЗркеркбрлНрк╕ ркЬрлБркжрлА рк░рлАркдрлЗ ркХрк╛рко ркХрк░рлЗ


# 1. Class ркЕркирлЗ Object рк╢рлБркВ ркЫрлЗ?
    #Class ркП template ркЫрлЗ ркЬрлЗркорк╛ркВркерлА object ркмркирк╛рк╡рк╛ркп ркЫрлЗ.
    #Object ркП class ркирлБркВ instance ркЫрлЗ, ркПркЯрк▓рлЗ ркХрлЗ original object.

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def display(self):
        print(f"Name: {self.name}, Age: {self.age}")

# Object ркмркирк╛рк╡рлЛ
s1 = Student("Ravi", 20)
s1.display()

#2. Encapsulation
class Account:
    def __init__(self, balance):
        self.__balance = balance  # private variable

    def get_balance(self):
        return self.__balance

acc = Account(1000)
print(acc.get_balance())  # Output: 1000

    #ЁЯФ╣ 3. Inheritance
    #ркПркХ Class ркмрлАркЬрлА Class ркирлА рк╡рк┐рк╢рлЗрк╖ркдрк╛ркУ ркорлЗрк│рк╡рлЗ ркЫрлЗ.

class Animal:
    def speak(self):
        print("Animal speaks")

class Dog(Animal):
    def bark(self):
        print("Dog barks")

d = Dog()
d.speak()  # Parent class method
d.bark()   # Child class method

#ЁЯФ╣ 4. Polymorphism
    #ркПркХ Function ркЕркерк╡рк╛ Method ркЬрлБркжрк╛-ркЬрлБркжрк╛ objects ркорк╛ркЯрлЗ ркЬрлБркжрлА рк░рлАркдрлЗ рк╡рк░рлНркдрлЗ ркЫрлЗ.

class Cat:
    def sound(self):
        print("hello")

class Dog:
    def sound(self):
        print("hello2")

# polymorphism example
for animal in (Cat(), Dog()):
    animal.sound()